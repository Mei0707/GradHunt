// services/scrapers/linkedinScraperPy.js
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

/**
 * Scrapes LinkedIn Jobs using a Python script
 * @param {string} role - Job role to search for
 * @param {string} location - Location to search in
 * @returns {Promise<Array>} - Array of job objects
 */
const scrapeLinkedInJobsPy = async (role, location) => {
  return new Promise((resolve, reject) => {
    console.log(`Starting LinkedIn jobs scraper for: ${role} in ${location}`);
    
    // Path to the Python script
    const scriptPath = path.join(__dirname, 'linkedinScraper.py');
    
    // Spawn a Python process
    const pythonProcess = spawn('python', [scriptPath, role, location, '25']);
    
    pythonProcess.stdout.on('data', (data) => {
      console.log(`Python output: ${data}`);
    });
    
    pythonProcess.stderr.on('data', (data) => {
      console.error(`Python error: ${data}`);
    });
    
    // Handle process completion
    pythonProcess.on('close', (code) => {
      if (code !== 0) {
        console.error(`Python script exited with code ${code}`);
        return resolve([]);
      }
      
      try {
        // Read the JSON file generated by the script
        const jobsData = fs.readFileSync(path.join(process.cwd(), 'linkedin_jobs.json'), 'utf8');
        const jobs = JSON.parse(jobsData);
        
        // Format jobs to match our expected structure
        const formattedJobs = jobs.map(job => ({
          id: job.id,
          title: job.title,
          company: job.company,
          location: job.location || location,
          description: job.description,
          url: job.url,
          source: job.source,
          time_posted: job.time_posted,
          created: new Date().toISOString(),
          // Add any additional fields your frontend expects
          num_applicants: job.num_applicants
        }));
        
        console.log(`Successfully processed ${formattedJobs.length} LinkedIn jobs`);
        resolve(formattedJobs);
      } catch (error) {
        console.error('Error reading or parsing LinkedIn jobs data:', error);
        resolve([]);
      }
    });
    
    // Handle process error
    pythonProcess.on('error', (error) => {
      console.error('Failed to start Python process:', error);
      resolve([]);
    });
  });
};

module.exports = {
  scrapeLinkedInJobsPy
};